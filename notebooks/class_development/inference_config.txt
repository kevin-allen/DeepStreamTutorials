################################################################################
# SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Following properties are mandatory when engine files are not specified:
#   int8-calib-file(Only in INT8), model-file-format
#   Caffemodel mandatory properties: model-file, proto-file, output-blob-names
#   UFF: uff-file, input-dims, uff-input-blob-name, output-blob-names
#   ONNX: onnx-file
#
# Mandatory properties for detectors:
#   num-detected-classes
#
# Optional properties for detectors:
#   cluster-mode(Default=Group Rectangles), interval(Primary mode only, Default=0)
#   custom-lib-path,
#   parse-bbox-func-name
#
# Mandatory properties for classifiers:
#   classifier-threshold, is-classifier
#
# Optional properties for classifiers:
#   classifier-async-mode(Secondary mode only, Default=false)
#
# Optional properties in secondary mode:
#   operate-on-gie-id(Default=0), operate-on-class-ids(Defaults to all classes),
#   input-object-min-width, input-object-min-height, input-object-max-width,
#   input-object-max-height
#
# Following properties are always recommended:
#   batch-size(Default=1)
#
# Other optional properties:
#   net-scale-factor(Default=1), network-mode(Default=0 i.e FP32),
#   model-color-format(Default=0 i.e. RGB) model-engine-file, labelfile-path,
#   mean-file, gie-unique-id(Default=0), offsets, process-mode (Default=1 i.e. primary),
#   custom-lib-path, network-mode(Default=0 i.e FP32)
#
# The values in the config file are overridden by values set through GObject
# properties.
#
#
# For information about gst-nvinfer, visit:
# https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_plugin_gst-nvinfer.html

[property]
gpu-id=0
# 1/std
net-scale-factor=0.015
# means of each color channel
offsets=127.3;117.5;121.7

model-color-format=0
#onnx-file=../../models/UNet.onnx
model-engine-file=../../models/serialized_UNet_engine.trt


#channel;height;width
infer-dims=3;480;640

# how many images to run through the model at the same time
# should be the same as the number of sources
batch-size=1


## 0=FP32, 1=INT8, 2=FP16 mode
network-mode=0

# number of tracked objects
# this should be the same as used when training the unet model
num-detected-classes=4

# process each frame = 0, 
interval=0
gie-unique-id=1


# network-type
# 0: Detector, 1: Classifier, 2: Segmentation, 3: Instance Segmentation
network-type=2

# probably needs to be the name of the output layer, not 100% sure
# output-blob-names=final_conv/BiasAdd
# output-blob-names=softmax_1
#output-blob-names=Conv_18

# to add the output tensor to the meta data traveling with the image buffer.
# we want the output of the model for real-time post-processing with the cpu
output-tensor-meta=1

# If value is below this, pixel won't make it to the final segmentation mask, min possible value is 0.
# Assigment of pixels to different detected classes. 
# Note that in pytorch the output has not passed through a softmax function 
# Thus, the output might not range from 0 to 1. 
segmentation-threshold=0.0



